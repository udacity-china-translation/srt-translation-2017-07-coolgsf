1
00:00:00,240 --> 00:00:02,560
所以 为了学习编程 我们需要学习新的语言

2
00:00:02,560 --> 00:00:05,820
通过这种方式向计算机描述操作内容

3
00:00:05,820 --> 00:00:08,109
比我们使用诸如英语一类的自然语言来描述

4
00:00:08,109 --> 00:00:11,150
更加精准

5
00:00:11,150 --> 00:00:14,830
并且这种描述是 Python 解释器能够运行程序的一种方式

6
00:00:14,830 --> 00:00:17,810
学习编程语言的最佳方法之一 是大胆尝试

7
00:00:17,810 --> 00:00:20,460
你可以在运行于浏览器中的 Python 解释器里进行尝试

8
00:00:20,460 --> 00:00:25,380
打个比方 我们试着运行 print 2 + 2 +

9
00:00:25,380 --> 00:00:28,530
在英语中 有的人可能会认为它等于 4

10
00:00:28,530 --> 00:00:32,049
可是当我们尝试在 Python 中运行它

11
00:00:32,049 --> 00:00:34,390
我们会得到一个错误

12
00:00:34,390 --> 00:00:37,190
产生错误的原因是这些内容实际上并非 Python 语言的一部分

13
00:00:37,190 --> 00:00:41,390
Python 解释器只会计算属于 Python 语言的代码

14
00:00:41,390 --> 00:00:44,570
如果你尝试计算

15
00:00:44,570 --> 00:00:47,120
不属于 Python 语言的一些内容

16
00:00:47,120 --> 00:00:50,480
就会产生错误 错误打印输出的方式有点吓人

17
00:00:50,480 --> 00:00:52,960
但是产生错误并没有坏处

18
00:00:52,960 --> 00:00:56,050
没关系尽管尝试你的代码 产生错误

19
00:00:56,050 --> 00:00:58,840
也是学习编程的方式之一

20
00:00:58,840 --> 00:01:01,670
这里我们看到的错误称为语法错误

21
00:01:01,670 --> 00:01:05,730
这表示我们要计算的内容不属于 Python 语言的一部分

22
00:01:05,730 --> 00:01:08,790
与英语类似 Python 也有定义字符串的语法

23
00:01:08,790 --> 00:01:11,970
在英语中 我们可以造出很多句子

24
00:01:11,970 --> 00:01:13,610
并非完全符合语法规则

25
00:01:13,610 --> 00:01:15,560
而人们仍然可以理解

26
00:01:15,560 --> 00:01:18,770
但是这些语言中隐含着语法规则

27
00:01:18,770 --> 00:01:22,110
母语为英语的人可能都曾经在所谓的语法学校中

28
00:01:22,110 --> 00:01:24,960
学习过这些规则

29
00:01:24,960 --> 00:01:26,810
而那些学习英语作为第二语言的人

30
00:01:26,810 --> 00:01:28,560
可能在学习英语的过程中学习了这些规则

31
00:01:28,560 --> 00:01:30,200
英语中规定了造句子的规则

32
00:01:30,200 --> 00:01:34,760
主语加上谓语动词 后面跟着宾语

33
00:01:35,880 --> 00:01:38,470
几乎所有语言都有类似的规则

34
00:01:38,470 --> 00:01:41,560
主谓宾的顺序可能不同

35
00:01:41,560 --> 00:01:43,500
但是都有将三者组合成一个句子的方法

36
00:01:43,500 --> 00:01:48,370
主语可以是名词

37
00:01:48,370 --> 00:01:51,080
宾语也可以是名词

38
00:01:51,080 --> 00:01:53,130
我们可以使用很多不同的内容作为句子成分

39
00:01:53,130 --> 00:01:57,840
所以 动词可以使用词语“吃”

40
00:01:57,840 --> 00:02:00,650
也可以使用词语“喜欢”

41
00:02:00,650 --> 00:02:04,350
能够作为动词的词语还有很多

42
00:02:04,350 --> 00:02:07,130
名词可以是词语“我” 也可以是词语“Python”

43
00:02:07,130 --> 00:02:10,032
或者词语“饼干”

44
00:02:10,032 --> 00:02:13,740
当然啦 英语语法实际上比这里讲的庞大且复杂得多

45
00:02:13,740 --> 00:02:15,650
但是我们仍然可以理解为 语法包含允许我们

46
00:02:15,650 --> 00:02:18,380
使用单词作为句子成分

47
00:02:18,380 --> 00:02:21,000
再由这些成分构成句子的规则

48
00:02:21,000 --> 00:02:24,060
这里我们采用一种称为巴克斯范式的注释法书写语法

49
00:02:24,060 --> 00:02:29,150
这种方式由 John Backus 发明

50
00:02:29,150 --> 00:02:32,410
二十世纪五十年代 John Backus 在 IBM 是 Fortran 语言的

51
00:02:32,410 --> 00:02:35,980
首席设计师

52
00:02:35,980 --> 00:02:39,050
Fortran 是最早被广泛使用的语言之一

53
00:02:39,050 --> 00:02:42,210
他们描述 Fortran 语言的方法是

54
00:02:42,210 --> 00:02:44,810
使用大量的例子和文字进行解释

55
00:02:44,810 --> 00:02:47,670
这是首个 Fortran 版本的用户手册中的一张截图 

56
00:02:47,670 --> 00:02:51,440
这种方法很有效 很多程序员能够理解并猜测出正确的含义

57
00:02:51,440 --> 00:02:54,330
但与足够精确还相去甚远

58
00:02:54,330 --> 00:02:57,660
后来在设计一种

59
00:02:57,660 --> 00:03:00,090
称为 ALGOL 的新语言时

60
00:03:00,090 --> 00:03:02,730
这种非正式的描述方法不够精确的缺点

61
00:03:02,730 --> 00:03:05,320
逐渐凸显

62
00:03:05,320 --> 00:03:08,420
于是 John Backus 就发明了我们现在用来描述语言的这种注释法
